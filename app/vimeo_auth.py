from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QMessageBox, QPushButton, QHBoxLayout
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtCore import QUrl, Signal, Qt, QTimer
import logging

from app.config_manager import ConfigManager

log = logging.getLogger(__name__)


class VimeoAuthWindow(QWidget):
    """Vimeo 로그인을 위한 웹뷰 창. 로그인 후 쿠키를 수집하여 저장합니다."""

    login_completed = Signal()
    login_error = Signal(str)

    def __init__(self, config_manager: ConfigManager, parent=None):
        super().__init__(parent)
        self.config_manager = config_manager
        self.setWindowTitle("Vimeo 로그인")
        self.setGeometry(120, 120, 800, 600)

        self._collected_cookies: list[dict] = []
        self._has_any_vimeo_cookie = False

        layout = QVBoxLayout()
        self.label = QLabel("Vimeo 계정으로 로그인해주세요")
        self.label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.label)

        # 저장/안내 버튼 영역
        buttons_row = QHBoxLayout()
        self.save_btn = QPushButton("쿠키 저장")
        self.save_btn.setToolTip("로그인이 완료되면 클릭하여 현재 쿠키를 저장합니다.")
        self.save_btn.clicked.connect(self.complete_login)
        buttons_row.addStretch(1)
        buttons_row.addWidget(self.save_btn)
        layout.addLayout(buttons_row)

        try:
            self.webview = QWebEngineView()
            # Vimeo 로그인 페이지로 이동
            self.webview.setUrl(QUrl("https://vimeo.com/log_in"))

            profile = self.webview.page().profile()
            if profile:
                self.cookie_store = profile.cookieStore()
                self.cookie_store.cookieAdded.connect(self.on_cookie_added)
            else:
                QMessageBox.critical(self, "오류", "웹 프로필을 가져올 수 없습니다.")
            layout.addWidget(self.webview)
            self.setLayout(layout)

            self.webview.loadFinished.connect(self.on_load_finished)
        except Exception as e:
            log.exception("VimeoAuthWindow 초기화 오류")
            QMessageBox.critical(self, "초기화 오류", f"로그인 창 초기화 중 오류: {e}")
            QTimer.singleShot(0, self.close)

    def on_cookie_added(self, cookie):
        domain = cookie.domain()
        # Vimeo 관련 도메인 수집
        if not any(d in domain for d in [".vimeo.com", "vimeo.com", "player.vimeo.com", "api.vimeo.com", "secure.vimeo.com"]):
            return

        name = cookie.name().data().decode("utf-8", errors="ignore")
        value = cookie.value().data().decode("utf-8", errors="ignore")
        path = cookie.path()
        secure = "TRUE" if cookie.isSecure() else "FALSE"
        expires = (
            int(cookie.expirationDate().toSecsSinceEpoch())
            if not cookie.isSessionCookie()
            else 0
        )

        cookie_dict = {
            "domain": domain,
            "flag": "TRUE" if domain.startswith(".") else "FALSE",
            "path": path,
            "secure": secure,
            "expiration": expires,
            "name": name,
            "value": value,
        }

        # 업데이트/추가
        updated = False
        for i, c in enumerate(self._collected_cookies):
            if c["domain"] == domain and c["path"] == path and c["name"] == name:
                self._collected_cookies[i] = cookie_dict
                updated = True
                break
        if not updated:
            self._collected_cookies.append(cookie_dict)

        self._has_any_vimeo_cookie = True
        # 수집 진행 상태를 간단히 표시
        try:
            self.label.setText(f"Vimeo 로그인 진행 중... 수집된 쿠키 {len(self._collected_cookies)}개")
        except Exception:
            pass

    def on_load_finished(self, success: bool):
        if not success:
            return
        # 자동 저장/닫기 동작은 제거하고, 사용자 수동 저장을 기다립니다.
        try:
            current_url = self.webview.url().toString()
            if "log_in" in current_url:
                self.label.setText("Vimeo 로그인 페이지 로딩됨. 로그인 후 '쿠키 저장'을 클릭하세요.")
            else:
                self.label.setText("로그인 상태 확인 중... 완료 시 '쿠키 저장'을 클릭하세요.")
        except Exception:
            pass

    def _to_netscape_string(self) -> str | None:
        if not self._collected_cookies:
            return None
        header = [
            "# Netscape HTTP Cookie File",
            "# https://curl.se/docs/http-cookies.html",
            "# This file was generated by LHCVideoDownloader. Do not edit.",
            "",
        ]
        lines = []
        for c in sorted(self._collected_cookies, key=lambda x: (x["domain"], x["path"], x["name"])):
            lines.append("\t".join([
                c["domain"], c["flag"], c["path"], c["secure"], str(c["expiration"]), c["name"], c["value"],
            ]))
        return "\n".join(header + lines)

    def complete_login(self):
        cookie_string = self._to_netscape_string()
        if not cookie_string:
            self.login_error.emit("쿠키 정보를 생성하지 못했습니다.")
            # 창은 닫지 않고 사용자가 다시 시도할 수 있도록 유지
            return
        ok = self.config_manager.save_cookies_for_site('vimeo', cookie_string)
        if ok:
            self.login_completed.emit()
        else:
            self.login_error.emit("쿠키 저장에 실패했습니다.")
        # 저장 후 창을 닫습니다.
        self.close() 